{"id":"UI-1","title":"SPA web UI for bd (local, real-time)","description":"Build a local-first single-page web app for the `bd` (beads) CLI that lets users browse issues, change status, and edit text with real-time updates. The app talks to a local WebSocket server; the server watches `.beads/issues.jsonl` and executes `bd` commands corresponding to edits from the UI.\n\nScope\n- Runs locally; no cloud dependencies\n- SPA served from localhost; WebSocket for data\n- Live updates driven by `.beads/issues.jsonl` watcher\n- Editing in UI sends WS messages; server runs matching `bd` commands\n\nNon-goals\n- Multi-user concurrency beyond a single machine\n- Authentication/authorization beyond localhost-only protections\n\nConstraints\n- ECMAScript modules; JSDoc types; `.ts` only for interface declarations\n- Follow provided Coding and Testing Standards\n- Prefer minimal dependencies; no heavy framework required\n","acceptance_criteria":"- User can view issues list and open an issue detail page.\n- User can change issue status and edit text fields (title, description, acceptance) from the UI.\n- UI changes propagate via WebSocket to a local server; server executes the corresponding `bd` command(s).\n- File watcher on `.beads/issues.jsonl` pushes updates; the on-screen issue(s) update without refresh.\n- Protocol documented (request/response + push events) with versioning and error model.\n- Local-only server binding (127.0.0.1) with basic input validation.\n- Tests cover protocol handlers and critical UI flows.\n- Quickstart docs explain setup, run, and development workflow.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-22T09:13:34.683692+02:00","updated_at":"2025-10-22T09:13:34.683692+02:00"}
{"id":"UI-15","title":"SPA web UI for bd (local app)","description":"Purpose: Build a local, single‑page web app to browse issues, change status, and edit text for the bd CLI tracker.\n\nScope and constraints:\n- Backend: Express app in `/server` serving static files from `/app`.\n- Realtime: All data exchange via WebSocket using the `ws` package.\n- Live updates: Watch `.beads/issues.jsonl`; broadcast changes to the active page/clients.\n- Frontend: `index.html` and ES modules in `/app` (vanilla JS, ESM, JSDoc types).\n- Actions: Client editing sends WS messages; server maps them to `bd` commands.\n- Testing: Use Vitest (Node + jsdom). Configure ESLint/Prettier and type checks via `tsc`.\n- Standards: Follow project coding/testing standards provided by user instructions.\n\nHigh‑level capabilities:\n- List, filter, and sort issues.\n- View issue details including dependencies.\n- Update status and priority; edit title/description.\n- Auto‑refresh on `.beads/issues.jsonl` changes; push‑based (no polling).\n- Display ready work and basic stats.\n\nNon‑goals (initial phase):\n- Multi‑repo orchestration, auth, or remote access beyond localhost.\n- Advanced visualization (graphs) beyond simple lists/trees.\n\nWS message types (initial draft):\n- `list-issues` { filters }\n- `show-issue` { id }\n- `update-status` { id, status }\n- `edit-text` { id, field: 'title'|'description', value }\n- `update-priority` { id, priority }\n- `create-issue` { title, type, priority, description }\n- `list-ready` {}\n- `subscribe-updates` {}\n\nbd command mapping (examples):\n- list → `bd list --json [filters]`\n- show → `bd show \u003cid\u003e --json`\n- update status/priority → `bd update \u003cid\u003e --status ... | --priority ...`\n- close → `bd close \u003cid\u003e`; reopen → `bd reopen \u003cid\u003e`\n- create → `bd create \"title\" -t \u003ctype\u003e -p \u003cprio\u003e -d \"desc\"`\n- dependencies → `bd dep add|remove \u003ca\u003e \u003cb\u003e`; tree → `bd dep tree \u003cid\u003e` (optional)\n\nLive update source:\n- Observe `.beads/issues.jsonl` (JSON Lines). On change, server emits `issues-changed` with minimal payload (timestamp + touched ids if derivable, else invalidate caches).\n\nDev ergonomics:\n- `npm run dev`: concurrently run Express+WS with watch (nodemon) and static app server.\n- `npm test`: vitest unit tests.\n- `npm run lint` and `npm run typecheck`.\n","acceptance_criteria":"- App lists issues from current bd DB and shows details.\n- Status changes and text edits via UI reflect in bd DB and survive reload.\n- `.beads/issues.jsonl` changes broadcast to connected clients; UI updates without manual refresh.\n- All traffic uses a WebSocket; no fetch REST endpoints for data.\n- Tests: At least core flows (list/show/update/edit) covered by Vitest.\n- Repo contains `/server`, `/app`, and initial docs with run instructions.\n","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-22T10:40:35.998696+02:00","updated_at":"2025-10-22T10:40:35.998696+02:00","dependencies":[{"issue_id":"UI-15","depends_on_id":"UI-1","type":"related","created_at":"2025-10-22T11:03:29.872508+02:00","created_by":"max"}]}
{"id":"UI-16","title":"Bootstrap Node project and tooling","description":"Initialize project scaffolding for the SPA.\n- Create `package.json` with ESM (`\"type\":\"module\"`).\n- Add scripts: `start`, `dev`, `test`, `typecheck`, `lint`, `format`.\n- Configure ESLint (ESM), Prettier, and tsconfig for JS type-checking with JSDoc.\n- Install and configure Vitest (Node + jsdom), and `@types/node` for type hints.\n- Ensure `.editorconfig` exists or add basic one.\n","acceptance_criteria":"- Running `npm test` executes Vitest and passes a trivial test.\n- `npx tsc` runs without errors on the initial codebase.\n- `npx eslint --fix` and `npx prettier --write` operate on staged files.\n- Project uses ESM and JSDoc typing conventions.\n","notes":"Scaffolded Node project with ESM and tooling.\n- Files: package.json, tsconfig.json, .eslintrc.json, .prettierrc.json, .editorconfig, vitest.config.mjs, src/utils/sum.js, test/sum.test.js. Updated existing eslint.config.js to add ignores for flat config.\n- Installed dev deps: vitest, typescript, @types/node, eslint, @eslint/js, eslint-plugin-jsdoc, eslint-plugin-n, eslint-plugin-import, eslint-plugin-promise, prettier, globals.\n- Validations: `npm test` passes (1 test). `npx tsc --noEmit` passes. `npx eslint --fix src test` runs clean. `npx prettier --write .` formats files.\n- Node engine set to \"\u003e=18.19\".\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:03.493953+02:00","updated_at":"2025-10-22T11:18:04.244474+02:00","closed_at":"2025-10-22T11:18:04.244474+02:00","dependencies":[{"issue_id":"UI-16","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:30.554474+02:00","created_by":"max"}]}
{"id":"UI-17","title":"Express server skeleton in /server","description":"Create a minimal Express server to host the SPA and prepare for WebSocket integration.\n- Serve static assets from `/app`.\n- Add health endpoint `GET /healthz` returning `{ ok: true }`.\n- Centralize config (port/env).\n- No REST data endpoints; data will be via WS only.\n","acceptance_criteria":"- `npm start` boots the Express server on localhost.\n- `/healthz` returns `{ ok: true }`.\n- `/` serves `/app/index.html`.\n","notes":"Implemented server skeleton per acceptance.\n- Files: server/config.js, server/app.js (GET /healthz, static /app, GET /), server/index.js (bootstrap), app/index.html placeholder.\n- package.json scripts updated: start/dev run server/index.js.\n- Added tests (no listen) verifying app shape and index presence.\n- Installed runtime dep: express; dev types: @types/express.\n- Validations: tests pass, typecheck passes, lint + prettier clean.\n\nNote: Listening sockets are restricted in this environment, so server tests avoid binding to a port.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:10.721042+02:00","updated_at":"2025-10-22T11:30:24.120582+02:00","closed_at":"2025-10-22T11:30:24.120582+02:00","dependencies":[{"issue_id":"UI-17","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:35.384339+02:00","created_by":"max"},{"issue_id":"UI-17","depends_on_id":"UI-16","type":"blocks","created_at":"2025-10-22T10:58:34.213593+02:00","created_by":"max"}]}
{"id":"UI-18","title":"Define WebSocket protocol and message schema","description":"Specify the message envelope and payload schemas exchanged between client and server.\n- Envelope: `{ id, type, payload }`; server replies `{ id, ok, type, payload, error? }`.\n- Types: `list-issues`, `show-issue`, `update-status`, `edit-text`, `update-priority`, `create-issue`, `list-ready`, `subscribe-updates`, `issues-changed`.\n- Error handling strategy and retry policy.\n- Document mapping to `bd` commands.\n- Add `app/protocol.ts` (types only) or `app/protocol.js` with JSDoc typedefs.\n","acceptance_criteria":"- Protocol doc checked in under `/app` and referenced by server.\n- Vitest unit tests assert basic encode/decode and type guards.\n","notes":"Added WS protocol definitions and tests.\n- app/protocol.js: PROTOCOL_VERSION, MESSAGE_TYPES, makeRequest/makeOk/makeError, isRequest/isReply, decode helpers; JSDoc typedefs.\n- app/protocol.md: human-readable spec and bd CLI mapping.\n- app/protocol.test.js: unit tests for type guards and round-trip.\n- server/protocol.js: re-export shared protocol to reference from server code.\n- Validations: tests pass (8), tsc passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:17.363344+02:00","updated_at":"2025-10-22T11:49:05.0079+02:00","closed_at":"2025-10-22T11:49:05.0079+02:00","dependencies":[{"issue_id":"UI-18","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:41.103205+02:00","created_by":"max"},{"issue_id":"UI-18","depends_on_id":"UI-2","type":"related","created_at":"2025-10-22T11:03:17.640019+02:00","created_by":"max"}]}
{"id":"UI-19","title":"WebSocket server with ws","description":"Implement a WebSocket server using the `ws` package.\n- Accept client connections; implement heartbeat/ping and cleanup.\n- Parse message envelope and dispatch to handlers.\n- Broadcast utility for server‑initiated events.\n- No data REST endpoints; WS is canonical.\n","acceptance_criteria":"- Multiple clients can connect concurrently.\n- Unknown message types receive a structured error.\n- Heartbeats keep connections alive; idle clients are pruned.\n","notes":"Implemented WebSocket server skeleton using ws. Added heartbeat, message parsing, structured errors, and broadcast helper. Wired into server/index.js. Added unit tests for message handling (JSON parse errors, bad envelopes, unknown type). All tests and type checks pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:24.135563+02:00","updated_at":"2025-10-22T12:17:44.488475+02:00","closed_at":"2025-10-22T12:17:44.488475+02:00","dependencies":[{"issue_id":"UI-19","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:45.916408+02:00","created_by":"max"},{"issue_id":"UI-19","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:58:45.246392+02:00","created_by":"max"},{"issue_id":"UI-19","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:58:49.816671+02:00","created_by":"max"}]}
{"id":"UI-2","title":"Architecture \u0026 protocol spec","description":"Create the initial architecture plan and protocol specification for the SPA and local WebSocket server.\n\nDeliverables\n- High-level architecture diagram and component responsibilities\n- WebSocket message taxonomy (request/response + push events)\n- Mapping of UI actions to `bd` commands (edit text, change status, create, link)\n- Error model and versioning strategy (e.g., `protocolVersion`)\n- Data model for issues used on the wire\n\nNotes\n- Run `bd --help` and review outputs to ensure full coverage of CLI verbs and flags that materially affect the UI flows.","design":"docs/architecture.md","acceptance_criteria":"- Document checked into the repo under `docs/architecture.md`.\n- WS messages and payload schemas defined with examples.\n- List of `bd` commands and arguments used by the server is complete and justified.\n- Risks and open questions captured with owners and next steps.","notes":"Drafted initial architecture and protocol spec (v1). Reviewed `bd --help` and documented CLI mappings for list/show/create/update and dep add/remove. Included error model, versioning, and watcher design. See docs/architecture.md.","status":"in_progress","priority":1,"issue_type":"task","created_at":"2025-10-22T09:14:01.071081+02:00","updated_at":"2025-10-22T09:27:32.611242+02:00","dependencies":[{"issue_id":"UI-2","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:02.083381+02:00","created_by":"max"}]}
{"id":"UI-20","title":"bd command runner wrapper","description":"Implement a safe wrapper around `bd` CLI for the server.\n- Use `child_process.spawn` with args array; avoid shell injection.\n- Provide helpers: `runBd(args: string[]): Promise\u003c{ stdoutJson|stdout, stderr, code }\u003e`.\n- Standardize JSON parsing for `--json` outputs; map errors to WS replies.\n- Surface bd path from env or auto‑detect.\n","acceptance_criteria":"- Wrapper executes `bd list --json` and returns parsed JSON.\n- Non‑zero exit emits structured error with code and stderr snippet.\n","notes":"Added bd command runner wrapper with tests.\n- server/bd.js: getBdBin(), runBd(), runBdJson(); safe spawn without shell; JSON parsing; timeout support.\n- server/bd.test.js: mocks child_process.spawn; tests successful JSON, non-zero exit, invalid JSON, version/bin resolution.\n- Validations: all tests pass (17), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:31.703495+02:00","updated_at":"2025-10-22T12:23:55.282647+02:00","closed_at":"2025-10-22T12:23:55.282647+02:00","dependencies":[{"issue_id":"UI-20","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:53.79683+02:00","created_by":"max"}]}
{"id":"UI-21","title":"WS handlers: list/show issues via bd","description":"Implement server WS handlers mapping to bd commands.\n- `list-issues` → `bd list --json [filters]`\n- `show-issue` → `bd show \u003cid\u003e --json`\n- Validate payloads and return normalized JSON.\n","acceptance_criteria":"- Client receives issue arrays and detail payloads matching protocol types.\n- Errors for unknown ids or bad filters are handled gracefully.\n","notes":"Added WS handlers for list/show via bd.\n- server/ws.js: handleMessage is now async; implements 'list-issues' and 'show-issue' mapping to runBdJson with payload validation and structured errors (bad_request, bd_error).\n- Tests: server/ws.handlers.test.js mocking runBdJson; covers success and error flows.\n- All tests pass (21), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:38.062039+02:00","updated_at":"2025-10-22T12:29:59.423597+02:00","closed_at":"2025-10-22T12:29:59.423597+02:00","dependencies":[{"issue_id":"UI-21","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:59.025574+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:58:55.984416+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T10:59:05.443093+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:59:12.300203+02:00","created_by":"max"}]}
{"id":"UI-22","title":"WS handlers: update/edit actions via bd","description":"Implement server WS handlers for mutations.\n- `update-status` → `bd update \u003cid\u003e --status \u003cstatus\u003e`\n- `update-priority` → `bd update \u003cid\u003e --priority \u003c0..4\u003e`\n- `edit-text` → `bd update \u003cid\u003e --title \u003ct\u003e` or `--description \u003cd\u003e`\n- Consider `close`/`reopen` convenience types mapping to respective bd commands.\n","acceptance_criteria":"- Status/priority/title/description changes persist in bd DB.\n- Replies include updated issue payload.\n","notes":"Completed mutation handlers.\n- server/ws.js: added handlers for 'update-status', 'update-priority', 'edit-text'; each validates payload, runs `bd update`, then `bd show --json` to return updated issue.\n- Tests: server/ws.mutations.test.js covering success and validation cases.\n- All tests pass (25), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:46.265413+02:00","updated_at":"2025-10-22T12:34:11.429326+02:00","closed_at":"2025-10-22T12:34:11.429326+02:00","dependencies":[{"issue_id":"UI-22","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:04.341752+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:16.75505+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T10:59:23.615688+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:59:28.965582+02:00","created_by":"max"}]}
{"id":"UI-23","title":"File watcher on .beads/issues.jsonl","description":"Watch `.beads/issues.jsonl` for changes and broadcast updates.\n- Debounce rapid changes; coalesce notifications.\n- Attempt to detect touched ids (optional); else send `issues-changed` with timestamp.\n- Integrate with WS broadcast utility.\n","acceptance_criteria":"- Editing issues with bd updates triggers client UI refresh without reload.\n- No redundant floods under heavy write bursts (debounce works).\n","notes":"Implemented `.beads/issues.jsonl` watcher and broadcast.\n- server/watcher.js: watchIssuesJsonl(root, on_change, { debounce_ms }) watches `.beads` dir and debounces events for `issues.jsonl`, invoking callback with `{ ts }`.\n- server/index.js: wires watcher to `broadcast('issues-changed', payload)`.\n- Tests: server/watcher.test.js mocks fs.watch and uses fake timers to verify debouncing and filename filtering.\n- All tests pass (27), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:52.502366+02:00","updated_at":"2025-10-22T12:43:55.123199+02:00","closed_at":"2025-10-22T12:43:55.123199+02:00","dependencies":[{"issue_id":"UI-23","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:08.646852+02:00","created_by":"max"},{"issue_id":"UI-23","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:59:33.856965+02:00","created_by":"max"},{"issue_id":"UI-23","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:38.876151+02:00","created_by":"max"}]}
{"id":"UI-24","title":"Push updates to subscribed clients","description":"Implement subscription management and targeted broadcasts.\n- Track per‑connection subscriptions (e.g., current list filters or opened issue id).\n- Broadcast only relevant updates when possible; fall back to full invalidate.\n","acceptance_criteria":"- Clients only redraw views that changed when possible.\n- Multiple clients receive consistent updates.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:41:57.629849+02:00","updated_at":"2025-10-22T10:41:57.629849+02:00","dependencies":[{"issue_id":"UI-24","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:13.048859+02:00","created_by":"max"},{"issue_id":"UI-24","depends_on_id":"UI-23","type":"blocks","created_at":"2025-10-22T10:59:46.140321+02:00","created_by":"max"},{"issue_id":"UI-24","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:51.366067+02:00","created_by":"max"}]}
{"id":"UI-25","title":"Scaffold /app index.html and base styles","description":"Create `/app/index.html` and basic CSS.\n- Minimal shell with two panels: list and details.\n- Include `\u003cscript type=\"module\" src=\"/app/main.js\"\u003e\u003c/script\u003e`.\n- Set up CSS variables and base layout without frameworks.\n","acceptance_criteria":"- `/` renders a simple layout with placeholder areas.\n- No blocking script errors in console.\n","notes":"Updated /app/index.html to load /app/styles.css and /app/main.js, added header + main shell container. Added /app/styles.css with CSS variables and two-panel grid layout. Implemented app/main.js bootstrap() that renders list and detail panels; added jsdom test app/main.test.js verifying panel rendering. All tests pass, typecheck passes, and lint/prettier are clean.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:08.77969+02:00","updated_at":"2025-10-22T12:50:09.906453+02:00","closed_at":"2025-10-22T12:50:09.906453+02:00","dependencies":[{"issue_id":"UI-25","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:18.093396+02:00","created_by":"max"},{"issue_id":"UI-25","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:59:55.358996+02:00","created_by":"max"}]}
{"id":"UI-26","title":"WebSocket client and connection management","description":"Implement client WS module in `/app/ws.js`.\n- Connect, exponential backoff, and auto‑reconnect.\n- Request/response correlation using `id`.\n- Subscribe to updates after connect.\n","acceptance_criteria":"- Client can recover from server restarts.\n- Inbound messages are dispatched to handlers; unknown types logged.\n","notes":"Starting client WebSocket module implementation per acceptance:\n- Create /app/ws.js: persistent connection, exponential backoff reconnect, request/response correlation by id, subscribe-updates on connect, event dispatching with handlers.\n- Add tests app/ws.test.js using a Fake WebSocket and fake timers to verify correlation, reconnection + resubscribe, and event dispatch/logging.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:42:15.643699+02:00","updated_at":"2025-10-22T13:31:36.499432+02:00","closed_at":"2025-10-22T13:31:36.499432+02:00","dependencies":[{"issue_id":"UI-26","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:24.73001+02:00","created_by":"max"},{"issue_id":"UI-26","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T11:00:02.213914+02:00","created_by":"max"},{"issue_id":"UI-26","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T11:00:08.029508+02:00","created_by":"max"}]}
{"id":"UI-27","title":"Client state store and simple router","description":"Add a minimal state store and hash‑based router.\n- Track filters, selection (current issue id), and derived lists.\n- Render on state changes with idempotent DOM updates (no framework).\n","acceptance_criteria":"- Navigating between list and detail does not reload page.\n- Direct links to `#/issue/UI-123` open the detail view.\n","notes":"Added minimal client state store and hash-based router.\n- New: app/state.js (selectedId, filters with subscribe), app/router.js (parseHash, gotoIssue, start/stop)\n- Updated: app/main.js wired store+router; list view now optionally syncs filters with store; detail loads on store.selectedId changes; push updates reload list and selected detail.\n- Tests: app/state.test.js and app/router.test.js; all tests pass.\n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:21.17244+02:00","updated_at":"2025-10-22T13:55:07.56152+02:00","closed_at":"2025-10-22T13:55:07.56152+02:00","dependencies":[{"issue_id":"UI-27","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:29.898387+02:00","created_by":"max"},{"issue_id":"UI-27","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:12.014133+02:00","created_by":"max"}]}
{"id":"UI-28","title":"Issues list view","description":"Implement issues list view in `/app/views/list.js`.\n- Load via `list-issues` WS message; render title, id, status, priority.\n- Add filter by status and search by text (client‑side for now).\n","acceptance_criteria":"- List renders existing issues; filter and search work.\n- Selecting an issue navigates to its detail view.\n","notes":"Implemented Issues List view.\n- app/views/list.js: createListView(mount, send, navigate?) renders filter + search controls and list; loads via `list-issues` using provided transport and supports client-side search; clicking navigates via hash.\n- app/views/list.test.js: jsdom tests for rendering, filtering, and navigation.\n- app/main.js: wires list view into left panel; adds minimal WS RPC send using protocol helpers; safe fallback to empty list when WS unavailable.\n- app/index.html + app/styles.css already scaffolded from UI-25.\n- All tests pass (29), typecheck passes, lint/prettier clean.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T10:42:27.75152+02:00","updated_at":"2025-10-22T13:04:31.306629+02:00","closed_at":"2025-10-22T13:04:31.306629+02:00","dependencies":[{"issue_id":"UI-28","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:34.686443+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:17.835355+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:00:26.435448+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-27","type":"blocks","created_at":"2025-10-22T11:00:31.940839+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-21","type":"blocks","created_at":"2025-10-22T11:00:36.621471+02:00","created_by":"max"}]}
{"id":"UI-29","title":"Issue detail view","description":"Implement issue detail view in `/app/views/detail.js`.\n- Show title, description, status, priority, dependencies, and links.\n- Render dependency list (blocked by / blocks).\n","acceptance_criteria":"- Detail reflects latest data for selected id.\n- Dependency lists render and link to related issues.\n","notes":"Implemented issue detail view with dependency lists and links.\n- New module: app/views/detail.js\n- Tests: app/views/detail.test.js (renders fields, links; placeholder cases)\n- Wiring: app/main.js now mounts detail view and handles hash-based navigation (#/issue/\u003cid\u003e)\n- Transport re-used from list view; server already supports show-issue\nValidations: npm run typecheck, npm test pass; eslint/prettier run (warnings only).","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T10:42:33.066567+02:00","updated_at":"2025-10-22T13:23:46.375702+02:00","closed_at":"2025-10-22T13:23:46.375702+02:00","dependencies":[{"issue_id":"UI-29","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:41.320211+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:41.333386+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:00:47.220199+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-27","type":"blocks","created_at":"2025-10-22T11:00:53.018525+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-21","type":"blocks","created_at":"2025-10-22T11:00:58.749371+02:00","created_by":"max"}]}
{"id":"UI-30","title":"Client edit interactions: status/priority/title/description","description":"Wire up UI controls to send WS messages for edits.\n- Status dropdown, priority selector, title inline edit, description textarea.\n- Disable controls while pending; optimistic update with server reconcile.\n","acceptance_criteria":"- Edits update bd DB and reflect back in UI.\n- Pending state prevents duplicate submissions; error shows toast.\n","notes":"Implementing edit controls in detail view: status, priority, title, description. Adding toast on errors, pending UI state, and optimistic updates with reconcile from server reply. Will add jsdom tests to verify interactions and disabled states.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:42:38.683987+02:00","updated_at":"2025-10-22T13:44:31.080199+02:00","closed_at":"2025-10-22T13:44:31.080199+02:00","dependencies":[{"issue_id":"UI-30","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:47.049445+02:00","created_by":"max"},{"issue_id":"UI-30","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:01:11.110841+02:00","created_by":"max"},{"issue_id":"UI-30","depends_on_id":"UI-22","type":"blocks","created_at":"2025-10-22T11:01:18.915144+02:00","created_by":"max"}]}
{"id":"UI-31","title":"Handle 'issues-changed' live updates on client","description":"Implement client listeners for `issues-changed`.\n- If list is visible, refresh list with `list-issues`.\n- If detail is visible, re‑fetch `show-issue` for current id.\n- Avoid jarring scroll/reset when possible.\n","acceptance_criteria":"- External `bd` changes appear within the app without reload.\n- UI remains stable (no flicker) during refresh.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:49.536739+02:00","updated_at":"2025-10-22T10:42:49.536739+02:00","dependencies":[{"issue_id":"UI-31","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:51.555794+02:00","created_by":"max"},{"issue_id":"UI-31","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:01:25.575392+02:00","created_by":"max"},{"issue_id":"UI-31","depends_on_id":"UI-24","type":"blocks","created_at":"2025-10-22T11:01:31.512311+02:00","created_by":"max"}]}
{"id":"UI-32","title":"Vitest setup (Node + jsdom)","description":"Install and configure Vitest.\n- Add `vitest.config.ts` suitable for ESM and mixed Node/jsdom environments.\n- Add example server and client tests.\n- Configure coverage output.\n","acceptance_criteria":"- `npm test` runs Node and jsdom suites.\n- Example tests pass and import ESM modules correctly.\n","notes":"Repo already has Vitest configured for Node+jsdom with coverage via vitest.config.mjs, and example server/client tests exist. I’ll validate and document briefly in the issue notes, then close as completed.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:55:47.073331+02:00","updated_at":"2025-10-22T13:47:28.437041+02:00","closed_at":"2025-10-22T13:47:28.437041+02:00","dependencies":[{"issue_id":"UI-32","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:56.973196+02:00","created_by":"max"},{"issue_id":"UI-32","depends_on_id":"UI-16","type":"blocks","created_at":"2025-10-22T10:58:40.915219+02:00","created_by":"max"}]}
{"id":"UI-33","title":"Server tests: protocol, bd runner, watchers","description":"Write unit tests for server pieces.\n- Protocol encode/decode and validation utilities.\n- `runBd` wrapper success/error flows.\n- File watcher debounce behavior (mock fs + timers).\n","acceptance_criteria":"- Tests cover happy/path and error cases with clear assertions.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:55:57.58851+02:00","updated_at":"2025-10-22T10:55:57.58851+02:00","dependencies":[{"issue_id":"UI-33","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:02.400296+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-32","type":"blocks","created_at":"2025-10-22T11:01:37.246489+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T11:01:42.26224+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T11:01:50.870233+02:00","created_by":"max"}]}
{"id":"UI-34","title":"Client tests: list, detail and edits","description":"Write unit tests for client views and interactions.\n- List view renders and filters.\n- Detail view loads and renders fields.\n- Edit actions dispatch WS messages and update the UI on reply.\n","acceptance_criteria":"- Tests run in jsdom and assert DOM state before/after actions.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:56:03.357772+02:00","updated_at":"2025-10-22T10:56:03.357772+02:00","dependencies":[{"issue_id":"UI-34","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:07.856212+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-32","type":"blocks","created_at":"2025-10-22T11:01:56.196489+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:02:01.513858+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-28","type":"blocks","created_at":"2025-10-22T11:02:14.566576+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-29","type":"blocks","created_at":"2025-10-22T11:02:21.280126+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-30","type":"blocks","created_at":"2025-10-22T11:02:27.799313+02:00","created_by":"max"}]}
{"id":"UI-35","title":"Developer README and run scripts","description":"Add README with setup and usage instructions.\n- How to run the server and app locally.\n- How to run tests, type checks, lint and format.\n- Notes about WS‑only data flow and `.beads/issues.jsonl` watcher.\n","acceptance_criteria":"- README includes copy‑pasteable commands and prerequisites.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:56:08.236927+02:00","updated_at":"2025-10-22T10:56:08.236927+02:00","dependencies":[{"issue_id":"UI-35","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:13.16867+02:00","created_by":"max"},{"issue_id":"UI-35","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T11:02:07.446681+02:00","created_by":"max"}]}
{"id":"UI-36","title":"Integrate ws client into UI and handle events","description":"Replace ad-hoc request WebSocket in app/main.js with persistent client from /app/ws.js and handle push events.\n- Use createWsClient() and pass client.send to views\n- Subscribe to 'issues-changed' and refresh list + current detail\n- Keep behavior unchanged in tests (no reliance on a real server)\n- Ensure typecheck/tests/lint pass","acceptance_criteria":"- app/main.js uses createWsClient\n- List refreshes on issues-changed; current detail reloads\n- All validations pass","notes":"Patched app/main.js to use createWsClient; wired issues-changed to reload list and current detail. Validated tests and type checks.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T13:37:55.29277+02:00","updated_at":"2025-10-22T13:38:09.899089+02:00","closed_at":"2025-10-22T13:38:09.899089+02:00"}
{"id":"UI-37","title":"Fix DB monitoring: watch SQLite DB instead of issues.jsonl","description":"The UI’s file watcher currently monitors `issues.jsonl` for changes. This is incorrect when using the SQLite backend; it should watch the resolved SQLite database file instead. As a result, UI updates are missed or stale when the DB changes.\n\nFollow the same DB resolution order as beads CLI:\n1) `--db` flag (e.g., `bd --db /path/to/db.db ...`)\n2) `$BEADS_DB` environment variable\n3) nearest `.beads/*.db` in current directory or ancestors (walk up like git)\n4) `~/.beads/default.db` fallback\n\nNotes:\n- Re-resolve and reattach watchers when working directory or configuration changes.\n- Handle the case where no DB is found with a clear, actionable message.","acceptance_criteria":"- Watches the resolved SQLite DB file instead of `issues.jsonl`.\n- DB path resolution matches beads CLI precedence: `--db` \u003e `$BEADS_DB` \u003e nearest `.beads/*.db` (walk up) \u003e `~/.beads/default.db`.\n- Changing the active workspace or `--db` value rebinds the watcher without restart.\n- When no DB can be resolved, surfaces a user-facing error with hints to set `--db`, `BEADS_DB`, or initialize with `bd init`.\n- Removes any reliance on `issues.jsonl` for change detection in SQLite mode.\n- Includes unit tests for resolution logic and watcher rebind behavior.\n- Updates documentation to describe the new watching source and resolution order.","notes":"Starting implementation: add db resolution per beads precedence (--db \u003e BEADS_DB \u003e nearest .beads/*.db \u003e ~/.beads/default.db), refactor watcher to observe DB file, rebind on config changes, pass --db to bd runner, update tests and docs.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T14:00:30.715131+02:00","updated_at":"2025-10-22T14:32:49.664055+02:00","closed_at":"2025-10-22T14:32:49.664055+02:00"}
{"id":"UI-38","title":"Details view: Markdown rendering and inline editing","description":"Improve the issue details UI for readability and editing.\n\n- Render `description` using a Markdown renderer with safe HTML sanitization.\n- On hover, show a focus ring on editable fields (title, description, acceptance, notes).\n- On click, switch the field into an input/textarea with a Save and Cancel action.\n- Preserve layout and typography for long text and code blocks.\n- Keyboard accessible: focus order, Enter/Escape bindings, and visible focus states.\n- Persist edits to the backend and refresh the view on success; show non-blocking error on failure.","acceptance_criteria":"- Description renders Markdown (headings, lists, code, links) with sanitized output.\n- Hover shows clear focus ring on editable fields; clicking toggles edit mode.\n- Edit mode provides input/textarea + Save and Cancel; Escape cancels, Enter saves where appropriate.\n- Changes persist and the UI reflects updated values without a full reload.\n- Accessibility: tabbable controls, visible focus indicators, ARIA labels where needed.\n- Unit tests cover Markdown rendering and edit mode state transitions.","notes":"Implemented Markdown rendering and inline editing in details view.\n- Added safe renderer: app/utils/markdown.js (headings, lists, code blocks, links, inline code) building DOM nodes without innerHTML; whitelisted URL schemes (http, https, mailto).\n- Updated UI: app/views/detail.js now renders title + description in read mode with hover focus ring. Click/Enter toggles to input/textarea with Save/Cancel. Escape cancels. Ctrl/Cmd+Enter saves description.\n- Added styles: focus ring + markdown typography in app/styles.css.\n- Updated and added tests: app/views/detail.test.js and detail.edits.test.js for markdown rendering and edit-mode transitions.\n- All checks: npm test, npm run typecheck, npm run lint pass.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T14:07:59.198666+02:00","updated_at":"2025-10-22T14:17:48.010273+02:00","closed_at":"2025-10-22T14:17:48.010275+02:00"}
{"id":"UI-39","title":"Fix Blocks / Blocked by in UI","description":"The dependency UI for \"Blocks\" and \"Blocked by\" does not function as expected. Links are not reliably created/removed, and the list does not always refresh to reflect the current state from the DB.","acceptance_criteria":"- Users can add and remove `blocks` dependencies between issues from the details view.\n- The lists for \"Blocks\" and \"Blocked by\" render accurate, up-to-date data after changes.\n- Prevents duplicate links and handles cycles gracefully with a clear error message.\n- Persists correctly to the backend and updates without full page reload.\n- Includes unit tests for add/remove flows and rendering after updates.","notes":"Investigating dependency UI for Blocks/Blocked by: ensure add/remove flows call ws handlers mapping to `bd dep add/remove` and list renders updated data; add dedupe and cycle detection error display; update client cache invalidation on dependency changes; add tests.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T14:08:06.845187+02:00","updated_at":"2025-10-22T14:43:52.809266+02:00","closed_at":"2025-10-22T14:43:52.809266+02:00"}
{"id":"UI-40","title":"Add support for issue labels in UI","description":"Add label support to issues in the UI. Labels act as lightweight area pointers (e.g., `frontend`, `backend`) and can be attached to issues for organization.","acceptance_criteria":"- Displays labels on issue list items and the details view.\n- Allows adding and removing labels from the details view.\n- Supports creating a new text label on the fly.\n- Persists label changes and updates the view immediately.\n- Not required to include filters by label at this stage.","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-22T14:08:11.96631+02:00","updated_at":"2025-10-22T14:08:11.96631+02:00"}
{"id":"UI-41","title":"Filter: show only Ready issues","description":"Add a list filter to display only issues that are ready to be worked on (no blocking dependencies).","acceptance_criteria":"- Adds a \"Ready\" filter control in the list view.\n- When enabled, the list shows only open issues that are not blocked by any `blocks` dependency.\n- Works together with search and sorting.\n- Filter state is reflected in the URL or stored locally so it persists across reloads.\n- Includes unit tests for readiness computation and filtering behavior.","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-22T14:08:21.199623+02:00","updated_at":"2025-10-22T14:08:21.199623+02:00"}
{"id":"UI-42","title":"Filter: by issue type","description":"Add filtering by issue type (bug, feature, task, epic, chore) in the list view.","acceptance_criteria":"- Adds UI to filter by one or multiple types: bug, feature, task, epic, chore.\n- Works in combination with \"Ready\" and search filters.\n- Filter state is reflected in the URL or stored locally so it persists across reloads.\n- Includes unit tests for filter state and correct list results.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-22T14:08:30.705446+02:00","updated_at":"2025-10-22T14:08:30.705446+02:00"}
{"id":"UI-43","title":"Add unit tests for markdown util","description":"The new Markdown renderer in `app/utils/markdown.js` has non-trivial parsing logic. Add focused unit tests to validate headings, paragraphs, lists, code blocks, inline code, and safe link handling.","acceptance_criteria":"- Tests cover: empty input, headings (h1/h3), paragraphs with/without blank lines, unordered and ordered lists, fenced code blocks, inline code, allowed links (http/https/mailto), and disallowed links (e.g., javascript:).\n- All tests pass under Vitest in jsdom environment.\n- Lint and typecheck pass.","notes":"Added comprehensive unit tests for the Markdown renderer:\n- File: app/utils/markdown.test.js\n- Covered: empty input, headings (h1/h3), paragraphs with/without blanks, UL/OL lists, fenced code blocks, inline code, allowed links (http/https/mailto), and blocked unsafe schemes (javascript:).\n- Validation: All tests pass; lint and typecheck clean.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T14:21:06.779575+02:00","updated_at":"2025-10-22T14:21:56.939958+02:00","closed_at":"2025-10-22T14:21:56.939962+02:00"}
