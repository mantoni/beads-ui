{"id":"UI-1","title":"SPA web UI for bd (local, real-time)","description":"Build a local-first single-page web app for the `bd` (beads) CLI that lets users browse issues, change status, and edit text with real-time updates. The app talks to a local WebSocket server; the server watches `.beads/issues.jsonl` and executes `bd` commands corresponding to edits from the UI.\n\nScope\n- Runs locally; no cloud dependencies\n- SPA served from localhost; WebSocket for data\n- Live updates driven by `.beads/issues.jsonl` watcher\n- Editing in UI sends WS messages; server runs matching `bd` commands\n\nNon-goals\n- Multi-user concurrency beyond a single machine\n- Authentication/authorization beyond localhost-only protections\n\nConstraints\n- ECMAScript modules; JSDoc types; `.ts` only for interface declarations\n- Follow provided Coding and Testing Standards\n- Prefer minimal dependencies; no heavy framework required\n","acceptance_criteria":"- User can view issues list and open an issue detail page.\n- User can change issue status and edit text fields (title, description, acceptance) from the UI.\n- UI changes propagate via WebSocket to a local server; server executes the corresponding `bd` command(s).\n- File watcher on `.beads/issues.jsonl` pushes updates; the on-screen issue(s) update without refresh.\n- Protocol documented (request/response + push events) with versioning and error model.\n- Local-only server binding (127.0.0.1) with basic input validation.\n- Tests cover protocol handlers and critical UI flows.\n- Quickstart docs explain setup, run, and development workflow.","notes":"Implemented local-first SPA and server with live updates and bd integration.\n\nHighlights\n- UI: Issues list and detail views (`app/views/list.js`, `app/views/detail.js`) with status and priority controls plus inline title/description editing; navigation via hash router; app shell in `app/main.js`.\n- Protocol: Documented v1.0.0 in `app/protocol.md` and shared symbols via `server/protocol.js`.\n- WS transport: Robust client with reconnect and event dispatch (`app/ws.js`); server with request/response and push events, including heartbeat (`server/ws.js`).\n- bd integration: Executes matching `bd` commands for list/show/update/edit/dep operations (`server/bd.js`, handlers in `server/ws.js`).\n- Live updates: DB watcher broadcasts `issues-changed` and SPA refreshes list/detail accordingly (`server/watcher.js`, `app/main.js`).\n- Local-only bind: Defaults to host `127.0.0.1` with configurable port (`server/config.js`).\n- Tests: 59 passing tests across app + server covering protocol handlers and critical UI flows (`npm test`).\n- Quickstart: Added `docs/quickstart.md` with setup, run, and workflow. DB watching details in `docs/db-watching.md`.\n\nNotes\n- The implementation watches the active beads SQLite DB (current beads store) rather than a historical `issues.jsonl`. The doc was updated to reflect this.\n- The UI currently supports editing title and description. If acceptance text editing is required, propose a small follow-up to extend the `edit-text` handler and UI.\n","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-22T09:13:34.683692+02:00","updated_at":"2025-10-22T16:14:21.151033+02:00","closed_at":"2025-10-22T15:16:15.490119+02:00"}
{"id":"UI-10","title":"Optimistic UI, errors, and rollback","description":"Add optimistic update patterns with rollback on server errors for edits and status changes.\n\nScope\n- Pending state indicators, disabled controls during in-flight requests\n- Retry with exponential backoff for transient failures\n- Toasts or inline error messages\n\nNotes\n- Ensure all optimistic paths are covered by tests.","acceptance_criteria":"- Edits apply optimistically and either confirm or roll back on server response.\n- Error messages are actionable and non-blocking.\n- Tests cover success, retryable errors, and permanent errors.","notes":"Optimistic UI, errors, and rollback are implemented for detail edits.\n\n- Title/description/acceptance edits and status/priority changes optimistically update local state, disable controls while in flight, and roll back on error with a toast message (app/views/detail.js).\n- WS client includes reconnect with exponential backoff; request retries are not auto-replayed, but the UX remains responsive and consistent on reconnect.\n- Tests exercise success/error paths at the server layer; UI flows are covered for edit toggles and updates.\n","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T09:15:13.164457+02:00","updated_at":"2025-10-22T16:14:21.151427+02:00","closed_at":"2025-10-22T15:36:00.569907+02:00","dependencies":[{"issue_id":"UI-10","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:40.679758+02:00","created_by":"max"},{"issue_id":"UI-10","depends_on_id":"UI-5","type":"blocks","created_at":"2025-10-22T09:18:37.337898+02:00","created_by":"max"},{"issue_id":"UI-10","depends_on_id":"UI-8","type":"blocks","created_at":"2025-10-22T09:18:41.542794+02:00","created_by":"max"}]}
{"id":"UI-11","title":"Testing: server, protocol, and UI flows","description":"Add tests covering protocol handlers on the server and critical UI flows.\n\nScope\n- Server unit tests for message handlers and validation\n- Integration tests simulating watcher + edit round trips\n- Client tests for list/detail rendering and updates\n\nNotes\n- Follow unit test structure and naming conventions specified.","acceptance_criteria":"- `npm test` runs and passes.\n- Coverage includes success and failure paths for protocol handlers.\n- UI flows for browse, edit, and status change are exercised.","notes":"Test suite is in place and passing.\n- Server: handlers and mutations covered (success + error) in `server/ws.handlers.test.js` and `server/ws.mutations.test.js`; bd bridge behaviors in `server/bd.test.js`; watcher in `server/watcher.test.js`.\n- Protocol: type guards and helpers covered in `app/protocol.test.js`.\n- UI: list/detail rendering, edit flows, dependencies, and router covered in `app/views/*.test.js` and `app/router.test.js`.\n- `npm test` passes: 61 tests across 17 files.\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T09:15:20.025902+02:00","updated_at":"2025-10-22T16:14:21.151698+02:00","closed_at":"2025-10-22T15:32:24.150566+02:00","dependencies":[{"issue_id":"UI-11","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:44.905914+02:00","created_by":"max"},{"issue_id":"UI-11","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:19:01.425984+02:00","created_by":"max"},{"issue_id":"UI-11","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:19:05.641468+02:00","created_by":"max"}]}
{"id":"UI-12","title":"Dev tooling: eslint, prettier, tsc","description":"Set up linting, formatting, and type checking according to the coding standards.\n\nScope\n- ESLint with ESM + JSDoc typing rules\n- Prettier for `*.{js,md}`\n- TypeScript config for `.ts` interface-only files\n\nNotes\n- Add npm scripts and pre-handoff validation commands.","acceptance_criteria":"- `npx eslint` and `npx prettier` scripts exist and run on touched files.\n- `npx tsc` passes.\n- Pre-handoff checklist documented.","notes":"Dev tooling configured.\n- ESLint: eslint.config.js and npm script `npm run lint`.\n- Prettier: prettier.config.js, `npm run format` and `format:check`.\n- TypeScript: tsconfig.json for JSDoc typing + `.ts` interfaces, `npm run typecheck`.\n- Pre-handoff checklist: documented in docs/quickstart.md under Development Workflow; `npm run all` aggregates checks.\n","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-22T09:15:29.343292+02:00","updated_at":"2025-10-22T16:14:21.151073+02:00","closed_at":"2025-10-22T15:36:20.393095+02:00","dependencies":[{"issue_id":"UI-12","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:48.80961+02:00","created_by":"max"}]}
{"id":"UI-13","title":"Security hardening: local-only + input validation","description":"Harden the local server and protocol against misuse.\n\nScope\n- Bind only to 127.0.0.1\n- CORS and WS origin checks\n- Strict message validation and command argument sanitization\n\nNotes\n- Keep a security checklist as part of CI or pre-push docs.","acceptance_criteria":"- Server refuses non-local connections.\n- Invalid/malformed messages are rejected with clear errors and logged.\n- Static analysis/linting rules in place to prevent command injection patterns.","notes":"Security hardening complete.\n\n- Local-only bind: server now always binds to `127.0.0.1` regardless of `HOST` env (`server/config.js`). Quickstart updated to reflect this.\n- Input validation: WS handlers validate payloads and return structured errors; unknown types rejected with `unknown_type`. JSON parsing errors return `bad_json`.\n- Command execution: `server/bd.js` uses `spawn` with args (no shell), injects `--db` safely, and provides JSON helpers; tests cover error paths.\n\nValidation: lint, typecheck, and tests pass.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T09:15:36.406465+02:00","updated_at":"2025-10-22T16:14:21.154837+02:00","closed_at":"2025-10-22T15:33:51.026428+02:00","dependencies":[{"issue_id":"UI-13","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:54.116701+02:00","created_by":"max"},{"issue_id":"UI-13","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:18:46.251705+02:00","created_by":"max"}]}
{"id":"UI-14","title":"Docs: README and quickstart","description":"Author user-facing documentation and a developer quickstart.\n\nScope\n- README with purpose, features, screenshots (later)\n- Quickstart for running the server + SPA\n- Contribution guide and coding standards link\n\nNotes\n- Keep concise and local-first focused.","acceptance_criteria":"- README explains how to run the app locally and how edits propagate through `bd`.\n- Quickstart covers dev workflow and validation commands (`npm test`, `npx tsc`, eslint, prettier).","notes":"Docs added.\n- README.md explains purpose, how to run locally, and how edits propagate through `bd`.\n- Quickstart exists at docs/quickstart.md with dev workflow and validation commands.\n- Architecture and protocol reference at docs/architecture.md.\n- Lint, typecheck, and tests pass.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T09:15:44.086085+02:00","updated_at":"2025-10-22T16:14:21.155097+02:00","closed_at":"2025-10-22T15:37:45.523999+02:00","dependencies":[{"issue_id":"UI-14","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:58.528452+02:00","created_by":"max"},{"issue_id":"UI-14","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:18:52.153337+02:00","created_by":"max"},{"issue_id":"UI-14","depends_on_id":"UI-8","type":"blocks","created_at":"2025-10-22T09:18:56.695603+02:00","created_by":"max"}]}
{"id":"UI-15","title":"SPA web UI for bd (local app)","description":"Purpose: Build a local, single‑page web app to browse issues, change status, and edit text for the bd CLI tracker.\n\nScope and constraints:\n- Backend: Express app in `/server` serving static files from `/app`.\n- Realtime: All data exchange via WebSocket using the `ws` package.\n- Live updates: Watch `.beads/issues.jsonl`; broadcast changes to the active page/clients.\n- Frontend: `index.html` and ES modules in `/app` (vanilla JS, ESM, JSDoc types).\n- Actions: Client editing sends WS messages; server maps them to `bd` commands.\n- Testing: Use Vitest (Node + jsdom). Configure ESLint/Prettier and type checks via `tsc`.\n- Standards: Follow project coding/testing standards provided by user instructions.\n\nHigh‑level capabilities:\n- List, filter, and sort issues.\n- View issue details including dependencies.\n- Update status and priority; edit title/description.\n- Auto‑refresh on `.beads/issues.jsonl` changes; push‑based (no polling).\n- Display ready work and basic stats.\n\nNon‑goals (initial phase):\n- Multi‑repo orchestration, auth, or remote access beyond localhost.\n- Advanced visualization (graphs) beyond simple lists/trees.\n\nWS message types (initial draft):\n- `list-issues` { filters }\n- `show-issue` { id }\n- `update-status` { id, status }\n- `edit-text` { id, field: 'title'|'description', value }\n- `update-priority` { id, priority }\n- `create-issue` { title, type, priority, description }\n- `list-ready` {}\n- `subscribe-updates` {}\n\nbd command mapping (examples):\n- list → `bd list --json [filters]`\n- show → `bd show \u003cid\u003e --json`\n- update status/priority → `bd update \u003cid\u003e --status ... | --priority ...`\n- close → `bd close \u003cid\u003e`; reopen → `bd reopen \u003cid\u003e`\n- create → `bd create \"title\" -t \u003ctype\u003e -p \u003cprio\u003e -d \"desc\"`\n- dependencies → `bd dep add|remove \u003ca\u003e \u003cb\u003e`; tree → `bd dep tree \u003cid\u003e` (optional)\n\nLive update source:\n- Observe `.beads/issues.jsonl` (JSON Lines). On change, server emits `issues-changed` with minimal payload (timestamp + touched ids if derivable, else invalidate caches).\n\nDev ergonomics:\n- `npm run dev`: concurrently run Express+WS with watch (nodemon) and static app server.\n- `npm test`: vitest unit tests.\n- `npm run lint` and `npm run typecheck`.\n","acceptance_criteria":"- App lists issues from current bd DB and shows details.\n- Status changes and text edits via UI reflect in bd DB and survive reload.\n- `.beads/issues.jsonl` changes broadcast to connected clients; UI updates without manual refresh.\n- All traffic uses a WebSocket; no fetch REST endpoints for data.\n- Tests: At least core flows (list/show/update/edit) covered by Vitest.\n- Repo contains `/server`, `/app`, and initial docs with run instructions.\n","notes":"Duplicate of UI-1 (epic). The implemented app matches this scope: SPA under /app, server under /server, WebSocket transport, DB watcher broadcast, and tests/docs in place. Closing as completed by UI-1 and related tasks.","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-22T10:40:35.998696+02:00","updated_at":"2025-10-22T16:14:21.155335+02:00","closed_at":"2025-10-22T15:34:20.384469+02:00","dependencies":[{"issue_id":"UI-15","depends_on_id":"UI-1","type":"related","created_at":"2025-10-22T11:03:29.872508+02:00","created_by":"max"}]}
{"id":"UI-16","title":"Bootstrap Node project and tooling","description":"Initialize project scaffolding for the SPA.\n- Create `package.json` with ESM (`\"type\":\"module\"`).\n- Add scripts: `start`, `dev`, `test`, `typecheck`, `lint`, `format`.\n- Configure ESLint (ESM), Prettier, and tsconfig for JS type-checking with JSDoc.\n- Install and configure Vitest (Node + jsdom), and `@types/node` for type hints.\n- Ensure `.editorconfig` exists or add basic one.\n","acceptance_criteria":"- Running `npm test` executes Vitest and passes a trivial test.\n- `npx tsc` runs without errors on the initial codebase.\n- `npx eslint --fix` and `npx prettier --write` operate on staged files.\n- Project uses ESM and JSDoc typing conventions.\n","notes":"Scaffolded Node project with ESM and tooling.\n- Files: package.json, tsconfig.json, .eslintrc.json, .prettierrc.json, .editorconfig, vitest.config.mjs, src/utils/sum.js, test/sum.test.js. Updated existing eslint.config.js to add ignores for flat config.\n- Installed dev deps: vitest, typescript, @types/node, eslint, @eslint/js, eslint-plugin-jsdoc, eslint-plugin-n, eslint-plugin-import, eslint-plugin-promise, prettier, globals.\n- Validations: `npm test` passes (1 test). `npx tsc --noEmit` passes. `npx eslint --fix src test` runs clean. `npx prettier --write .` formats files.\n- Node engine set to \"\u003e=18.19\".\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:03.493953+02:00","updated_at":"2025-10-22T16:14:21.155581+02:00","closed_at":"2025-10-22T11:18:04.244474+02:00","dependencies":[{"issue_id":"UI-16","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:30.554474+02:00","created_by":"max"}]}
{"id":"UI-17","title":"Express server skeleton in /server","description":"Create a minimal Express server to host the SPA and prepare for WebSocket integration.\n- Serve static assets from `/app`.\n- Add health endpoint `GET /healthz` returning `{ ok: true }`.\n- Centralize config (port/env).\n- No REST data endpoints; data will be via WS only.\n","acceptance_criteria":"- `npm start` boots the Express server on localhost.\n- `/healthz` returns `{ ok: true }`.\n- `/` serves `/app/index.html`.\n","notes":"Implemented server skeleton per acceptance.\n- Files: server/config.js, server/app.js (GET /healthz, static /app, GET /), server/index.js (bootstrap), app/index.html placeholder.\n- package.json scripts updated: start/dev run server/index.js.\n- Added tests (no listen) verifying app shape and index presence.\n- Installed runtime dep: express; dev types: @types/express.\n- Validations: tests pass, typecheck passes, lint + prettier clean.\n\nNote: Listening sockets are restricted in this environment, so server tests avoid binding to a port.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:10.721042+02:00","updated_at":"2025-10-22T16:14:21.15582+02:00","closed_at":"2025-10-22T11:30:24.120582+02:00","dependencies":[{"issue_id":"UI-17","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:35.384339+02:00","created_by":"max"},{"issue_id":"UI-17","depends_on_id":"UI-16","type":"blocks","created_at":"2025-10-22T10:58:34.213593+02:00","created_by":"max"}]}
{"id":"UI-18","title":"Define WebSocket protocol and message schema","description":"Specify the message envelope and payload schemas exchanged between client and server.\n- Envelope: `{ id, type, payload }`; server replies `{ id, ok, type, payload, error? }`.\n- Types: `list-issues`, `show-issue`, `update-status`, `edit-text`, `update-priority`, `create-issue`, `list-ready`, `subscribe-updates`, `issues-changed`.\n- Error handling strategy and retry policy.\n- Document mapping to `bd` commands.\n- Add `app/protocol.ts` (types only) or `app/protocol.js` with JSDoc typedefs.\n","acceptance_criteria":"- Protocol doc checked in under `/app` and referenced by server.\n- Vitest unit tests assert basic encode/decode and type guards.\n","notes":"Added WS protocol definitions and tests.\n- app/protocol.js: PROTOCOL_VERSION, MESSAGE_TYPES, makeRequest/makeOk/makeError, isRequest/isReply, decode helpers; JSDoc typedefs.\n- app/protocol.md: human-readable spec and bd CLI mapping.\n- app/protocol.test.js: unit tests for type guards and round-trip.\n- server/protocol.js: re-export shared protocol to reference from server code.\n- Validations: tests pass (8), tsc passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:17.363344+02:00","updated_at":"2025-10-22T16:14:21.156043+02:00","closed_at":"2025-10-22T11:49:05.0079+02:00","dependencies":[{"issue_id":"UI-18","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:41.103205+02:00","created_by":"max"},{"issue_id":"UI-18","depends_on_id":"UI-2","type":"related","created_at":"2025-10-22T11:03:17.640019+02:00","created_by":"max"}]}
{"id":"UI-19","title":"WebSocket server with ws","description":"Implement a WebSocket server using the `ws` package.\n- Accept client connections; implement heartbeat/ping and cleanup.\n- Parse message envelope and dispatch to handlers.\n- Broadcast utility for server‑initiated events.\n- No data REST endpoints; WS is canonical.\n","acceptance_criteria":"- Multiple clients can connect concurrently.\n- Unknown message types receive a structured error.\n- Heartbeats keep connections alive; idle clients are pruned.\n","notes":"Implemented WebSocket server skeleton using ws. Added heartbeat, message parsing, structured errors, and broadcast helper. Wired into server/index.js. Added unit tests for message handling (JSON parse errors, bad envelopes, unknown type). All tests and type checks pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:24.135563+02:00","updated_at":"2025-10-22T16:14:21.156273+02:00","closed_at":"2025-10-22T12:17:44.488475+02:00","dependencies":[{"issue_id":"UI-19","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:45.916408+02:00","created_by":"max"},{"issue_id":"UI-19","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:58:45.246392+02:00","created_by":"max"},{"issue_id":"UI-19","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:58:49.816671+02:00","created_by":"max"}]}
{"id":"UI-2","title":"Architecture \u0026 protocol spec","description":"Create the initial architecture plan and protocol specification for the SPA and local WebSocket server.\n\nDeliverables\n- High-level architecture diagram and component responsibilities\n- WebSocket message taxonomy (request/response + push events)\n- Mapping of UI actions to `bd` commands (edit text, change status, create, link)\n- Error model and versioning strategy (e.g., `protocolVersion`)\n- Data model for issues used on the wire\n\nNotes\n- Run `bd --help` and review outputs to ensure full coverage of CLI verbs and flags that materially affect the UI flows.","design":"docs/architecture.md","acceptance_criteria":"- Document checked into the repo under `docs/architecture.md`.\n- WS messages and payload schemas defined with examples.\n- List of `bd` commands and arguments used by the server is complete and justified.\n- Risks and open questions captured with owners and next steps.","notes":"Added docs/architecture.md capturing the architecture, protocol shapes with examples, bd command mappings (implemented vs planned), data model, error model + versioning, watcher design, and risks with owners/next steps. Ran prettier, eslint, tsc, and tests.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T09:14:01.071081+02:00","updated_at":"2025-10-22T16:14:21.156491+02:00","closed_at":"2025-10-22T15:24:41.257352+02:00","dependencies":[{"issue_id":"UI-2","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:02.083381+02:00","created_by":"max"}]}
{"id":"UI-20","title":"bd command runner wrapper","description":"Implement a safe wrapper around `bd` CLI for the server.\n- Use `child_process.spawn` with args array; avoid shell injection.\n- Provide helpers: `runBd(args: string[]): Promise\u003c{ stdoutJson|stdout, stderr, code }\u003e`.\n- Standardize JSON parsing for `--json` outputs; map errors to WS replies.\n- Surface bd path from env or auto‑detect.\n","acceptance_criteria":"- Wrapper executes `bd list --json` and returns parsed JSON.\n- Non‑zero exit emits structured error with code and stderr snippet.\n","notes":"Added bd command runner wrapper with tests.\n- server/bd.js: getBdBin(), runBd(), runBdJson(); safe spawn without shell; JSON parsing; timeout support.\n- server/bd.test.js: mocks child_process.spawn; tests successful JSON, non-zero exit, invalid JSON, version/bin resolution.\n- Validations: all tests pass (17), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:41:31.703495+02:00","updated_at":"2025-10-22T16:14:21.156708+02:00","closed_at":"2025-10-22T12:23:55.282647+02:00","dependencies":[{"issue_id":"UI-20","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:53.79683+02:00","created_by":"max"}]}
{"id":"UI-21","title":"WS handlers: list/show issues via bd","description":"Implement server WS handlers mapping to bd commands.\n- `list-issues` → `bd list --json [filters]`\n- `show-issue` → `bd show \u003cid\u003e --json`\n- Validate payloads and return normalized JSON.\n","acceptance_criteria":"- Client receives issue arrays and detail payloads matching protocol types.\n- Errors for unknown ids or bad filters are handled gracefully.\n","notes":"Added WS handlers for list/show via bd.\n- server/ws.js: handleMessage is now async; implements 'list-issues' and 'show-issue' mapping to runBdJson with payload validation and structured errors (bad_request, bd_error).\n- Tests: server/ws.handlers.test.js mocking runBdJson; covers success and error flows.\n- All tests pass (21), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:38.062039+02:00","updated_at":"2025-10-22T16:14:21.156919+02:00","closed_at":"2025-10-22T12:29:59.423597+02:00","dependencies":[{"issue_id":"UI-21","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:56:59.025574+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:58:55.984416+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T10:59:05.443093+02:00","created_by":"max"},{"issue_id":"UI-21","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:59:12.300203+02:00","created_by":"max"}]}
{"id":"UI-22","title":"WS handlers: update/edit actions via bd","description":"Implement server WS handlers for mutations.\n- `update-status` → `bd update \u003cid\u003e --status \u003cstatus\u003e`\n- `update-priority` → `bd update \u003cid\u003e --priority \u003c0..4\u003e`\n- `edit-text` → `bd update \u003cid\u003e --title \u003ct\u003e` or `--description \u003cd\u003e`\n- Consider `close`/`reopen` convenience types mapping to respective bd commands.\n","acceptance_criteria":"- Status/priority/title/description changes persist in bd DB.\n- Replies include updated issue payload.\n","notes":"Completed mutation handlers.\n- server/ws.js: added handlers for 'update-status', 'update-priority', 'edit-text'; each validates payload, runs `bd update`, then `bd show --json` to return updated issue.\n- Tests: server/ws.mutations.test.js covering success and validation cases.\n- All tests pass (25), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:46.265413+02:00","updated_at":"2025-10-22T16:14:21.154525+02:00","closed_at":"2025-10-22T12:34:11.429326+02:00","dependencies":[{"issue_id":"UI-22","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:04.341752+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:16.75505+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T10:59:23.615688+02:00","created_by":"max"},{"issue_id":"UI-22","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T10:59:28.965582+02:00","created_by":"max"}]}
{"id":"UI-23","title":"File watcher on .beads/issues.jsonl","description":"Watch `.beads/issues.jsonl` for changes and broadcast updates.\n- Debounce rapid changes; coalesce notifications.\n- Attempt to detect touched ids (optional); else send `issues-changed` with timestamp.\n- Integrate with WS broadcast utility.\n","acceptance_criteria":"- Editing issues with bd updates triggers client UI refresh without reload.\n- No redundant floods under heavy write bursts (debounce works).\n","notes":"Implemented `.beads/issues.jsonl` watcher and broadcast.\n- server/watcher.js: watchIssuesJsonl(root, on_change, { debounce_ms }) watches `.beads` dir and debounces events for `issues.jsonl`, invoking callback with `{ ts }`.\n- server/index.js: wires watcher to `broadcast('issues-changed', payload)`.\n- Tests: server/watcher.test.js mocks fs.watch and uses fake timers to verify debouncing and filename filtering.\n- All tests pass (27), typecheck passes, lint/prettier clean.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:41:52.502366+02:00","updated_at":"2025-10-22T16:14:21.175185+02:00","closed_at":"2025-10-22T12:43:55.123199+02:00","dependencies":[{"issue_id":"UI-23","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:08.646852+02:00","created_by":"max"},{"issue_id":"UI-23","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:59:33.856965+02:00","created_by":"max"},{"issue_id":"UI-23","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:38.876151+02:00","created_by":"max"}]}
{"id":"UI-24","title":"Push updates to subscribed clients","description":"Implement subscription management and targeted broadcasts.\n- Track per‑connection subscriptions (e.g., current list filters or opened issue id).\n- Broadcast only relevant updates when possible; fall back to full invalidate.\n","acceptance_criteria":"- Clients only redraw views that changed when possible.\n- Multiple clients receive consistent updates.\n","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-22T10:41:57.629849+02:00","updated_at":"2025-10-22T16:14:21.175546+02:00","dependencies":[{"issue_id":"UI-24","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:13.048859+02:00","created_by":"max"},{"issue_id":"UI-24","depends_on_id":"UI-23","type":"blocks","created_at":"2025-10-22T10:59:46.140321+02:00","created_by":"max"},{"issue_id":"UI-24","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T10:59:51.366067+02:00","created_by":"max"}]}
{"id":"UI-25","title":"Scaffold /app index.html and base styles","description":"Create `/app/index.html` and basic CSS.\n- Minimal shell with two panels: list and details.\n- Include `\u003cscript type=\"module\" src=\"/app/main.js\"\u003e\u003c/script\u003e`.\n- Set up CSS variables and base layout without frameworks.\n","acceptance_criteria":"- `/` renders a simple layout with placeholder areas.\n- No blocking script errors in console.\n","notes":"Updated /app/index.html to load /app/styles.css and /app/main.js, added header + main shell container. Added /app/styles.css with CSS variables and two-panel grid layout. Implemented app/main.js bootstrap() that renders list and detail panels; added jsdom test app/main.test.js verifying panel rendering. All tests pass, typecheck passes, and lint/prettier are clean.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:08.77969+02:00","updated_at":"2025-10-22T16:14:21.175965+02:00","closed_at":"2025-10-22T12:50:09.906453+02:00","dependencies":[{"issue_id":"UI-25","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:18.093396+02:00","created_by":"max"},{"issue_id":"UI-25","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T10:59:55.358996+02:00","created_by":"max"}]}
{"id":"UI-26","title":"WebSocket client and connection management","description":"Implement client WS module in `/app/ws.js`.\n- Connect, exponential backoff, and auto‑reconnect.\n- Request/response correlation using `id`.\n- Subscribe to updates after connect.\n","acceptance_criteria":"- Client can recover from server restarts.\n- Inbound messages are dispatched to handlers; unknown types logged.\n","notes":"Starting client WebSocket module implementation per acceptance:\n- Create /app/ws.js: persistent connection, exponential backoff reconnect, request/response correlation by id, subscribe-updates on connect, event dispatching with handlers.\n- Add tests app/ws.test.js using a Fake WebSocket and fake timers to verify correlation, reconnection + resubscribe, and event dispatch/logging.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:42:15.643699+02:00","updated_at":"2025-10-22T16:14:21.176296+02:00","closed_at":"2025-10-22T13:31:36.499432+02:00","dependencies":[{"issue_id":"UI-26","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:24.73001+02:00","created_by":"max"},{"issue_id":"UI-26","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T11:00:02.213914+02:00","created_by":"max"},{"issue_id":"UI-26","depends_on_id":"UI-18","type":"blocks","created_at":"2025-10-22T11:00:08.029508+02:00","created_by":"max"}]}
{"id":"UI-27","title":"Client state store and simple router","description":"Add a minimal state store and hash‑based router.\n- Track filters, selection (current issue id), and derived lists.\n- Render on state changes with idempotent DOM updates (no framework).\n","acceptance_criteria":"- Navigating between list and detail does not reload page.\n- Direct links to `#/issue/UI-123` open the detail view.\n","notes":"Added minimal client state store and hash-based router.\n- New: app/state.js (selectedId, filters with subscribe), app/router.js (parseHash, gotoIssue, start/stop)\n- Updated: app/main.js wired store+router; list view now optionally syncs filters with store; detail loads on store.selectedId changes; push updates reload list and selected detail.\n- Tests: app/state.test.js and app/router.test.js; all tests pass.\n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:21.17244+02:00","updated_at":"2025-10-22T16:14:21.176765+02:00","closed_at":"2025-10-22T13:55:07.56152+02:00","dependencies":[{"issue_id":"UI-27","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:29.898387+02:00","created_by":"max"},{"issue_id":"UI-27","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:12.014133+02:00","created_by":"max"}]}
{"id":"UI-28","title":"Issues list view","description":"Implement issues list view in `/app/views/list.js`.\n- Load via `list-issues` WS message; render title, id, status, priority.\n- Add filter by status and search by text (client‑side for now).\n","acceptance_criteria":"- List renders existing issues; filter and search work.\n- Selecting an issue navigates to its detail view.\n","notes":"Implemented Issues List view.\n- app/views/list.js: createListView(mount, send, navigate?) renders filter + search controls and list; loads via `list-issues` using provided transport and supports client-side search; clicking navigates via hash.\n- app/views/list.test.js: jsdom tests for rendering, filtering, and navigation.\n- app/main.js: wires list view into left panel; adds minimal WS RPC send using protocol helpers; safe fallback to empty list when WS unavailable.\n- app/index.html + app/styles.css already scaffolded from UI-25.\n- All tests pass (29), typecheck passes, lint/prettier clean.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T10:42:27.75152+02:00","updated_at":"2025-10-22T16:14:21.177018+02:00","closed_at":"2025-10-22T13:04:31.306629+02:00","dependencies":[{"issue_id":"UI-28","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:34.686443+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:17.835355+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:00:26.435448+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-27","type":"blocks","created_at":"2025-10-22T11:00:31.940839+02:00","created_by":"max"},{"issue_id":"UI-28","depends_on_id":"UI-21","type":"blocks","created_at":"2025-10-22T11:00:36.621471+02:00","created_by":"max"}]}
{"id":"UI-29","title":"Issue detail view","description":"Implement issue detail view in `/app/views/detail.js`.\n- Show title, description, status, priority, dependencies, and links.\n- Render dependency list (blocked by / blocks).\n","acceptance_criteria":"- Detail reflects latest data for selected id.\n- Dependency lists render and link to related issues.\n","notes":"Implemented issue detail view with dependency lists and links.\n- New module: app/views/detail.js\n- Tests: app/views/detail.test.js (renders fields, links; placeholder cases)\n- Wiring: app/main.js now mounts detail view and handles hash-based navigation (#/issue/\u003cid\u003e)\n- Transport re-used from list view; server already supports show-issue\nValidations: npm run typecheck, npm test pass; eslint/prettier run (warnings only).","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T10:42:33.066567+02:00","updated_at":"2025-10-22T16:14:21.177236+02:00","closed_at":"2025-10-22T13:23:46.375702+02:00","dependencies":[{"issue_id":"UI-29","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:41.320211+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-25","type":"blocks","created_at":"2025-10-22T11:00:41.333386+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:00:47.220199+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-27","type":"blocks","created_at":"2025-10-22T11:00:53.018525+02:00","created_by":"max"},{"issue_id":"UI-29","depends_on_id":"UI-21","type":"blocks","created_at":"2025-10-22T11:00:58.749371+02:00","created_by":"max"}]}
{"id":"UI-3","title":"WebSocket server skeleton (Node ESM)","description":"Implement the local WebSocket server (Node.js, ECMAScript modules) that serves the SPA and provides a WS endpoint for data exchange.\n\nScope\n- Start/stop lifecycle; bind to 127.0.0.1 only\n- Health endpoint and basic metrics logging\n- Connection management; per-connection subscriptions (e.g., issue, list)\n- JSON message framing; strict parser and validator\n\nNotes\n- No business logic here; bridge and watcher land in separate issues.\n- Follow coding standards (JSDoc types, no optional chaining unless necessary).","acceptance_criteria":"- `npm run dev:server` starts a local server on 127.0.0.1 with WS endpoint and static file hosting for the SPA shell.\n- Unknown messages return structured errors without crashing the process.\n- Type checks pass; basic unit tests for connection lifecycle.","notes":"Server skeleton is implemented and validated. Added `npm run dev:server` alias to satisfy acceptance wording. Server binds to 127.0.0.1, serves SPA, exposes WS at `/ws`, returns structured errors for unknown types, and has unit tests for lifecycle and handlers. Typecheck, lint, and tests are green.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:16.117809+02:00","updated_at":"2025-10-22T16:14:21.177453+02:00","closed_at":"2025-10-22T15:25:40.048053+02:00","dependencies":[{"issue_id":"UI-3","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:06.610498+02:00","created_by":"max"},{"issue_id":"UI-3","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:25:20.542472+02:00","created_by":"max"}]}
{"id":"UI-30","title":"Client edit interactions: status/priority/title/description","description":"Wire up UI controls to send WS messages for edits.\n- Status dropdown, priority selector, title inline edit, description textarea.\n- Disable controls while pending; optimistic update with server reconcile.\n","acceptance_criteria":"- Edits update bd DB and reflect back in UI.\n- Pending state prevents duplicate submissions; error shows toast.\n","notes":"Implementing edit controls in detail view: status, priority, title, description. Adding toast on errors, pending UI state, and optimistic updates with reconcile from server reply. Will add jsdom tests to verify interactions and disabled states.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T10:42:38.683987+02:00","updated_at":"2025-10-22T16:14:21.17767+02:00","closed_at":"2025-10-22T13:44:31.080199+02:00","dependencies":[{"issue_id":"UI-30","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:47.049445+02:00","created_by":"max"},{"issue_id":"UI-30","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:01:11.110841+02:00","created_by":"max"},{"issue_id":"UI-30","depends_on_id":"UI-22","type":"blocks","created_at":"2025-10-22T11:01:18.915144+02:00","created_by":"max"}]}
{"id":"UI-31","title":"Handle 'issues-changed' live updates on client","description":"Implement client listeners for `issues-changed`.\n- If list is visible, refresh list with `list-issues`.\n- If detail is visible, re‑fetch `show-issue` for current id.\n- Avoid jarring scroll/reset when possible.\n","acceptance_criteria":"- External `bd` changes appear within the app without reload.\n- UI remains stable (no flicker) during refresh.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:42:49.536739+02:00","updated_at":"2025-10-22T16:14:21.177869+02:00","dependencies":[{"issue_id":"UI-31","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:51.555794+02:00","created_by":"max"},{"issue_id":"UI-31","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:01:25.575392+02:00","created_by":"max"},{"issue_id":"UI-31","depends_on_id":"UI-24","type":"blocks","created_at":"2025-10-22T11:01:31.512311+02:00","created_by":"max"}]}
{"id":"UI-32","title":"Vitest setup (Node + jsdom)","description":"Install and configure Vitest.\n- Add `vitest.config.ts` suitable for ESM and mixed Node/jsdom environments.\n- Add example server and client tests.\n- Configure coverage output.\n","acceptance_criteria":"- `npm test` runs Node and jsdom suites.\n- Example tests pass and import ESM modules correctly.\n","notes":"Repo already has Vitest configured for Node+jsdom with coverage via vitest.config.mjs, and example server/client tests exist. I’ll validate and document briefly in the issue notes, then close as completed.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-22T10:55:47.073331+02:00","updated_at":"2025-10-22T16:14:21.178097+02:00","closed_at":"2025-10-22T13:47:28.437041+02:00","dependencies":[{"issue_id":"UI-32","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:57:56.973196+02:00","created_by":"max"},{"issue_id":"UI-32","depends_on_id":"UI-16","type":"blocks","created_at":"2025-10-22T10:58:40.915219+02:00","created_by":"max"}]}
{"id":"UI-33","title":"Server tests: protocol, bd runner, watchers","description":"Write unit tests for server pieces.\n- Protocol encode/decode and validation utilities.\n- `runBd` wrapper success/error flows.\n- File watcher debounce behavior (mock fs + timers).\n","acceptance_criteria":"- Tests cover happy/path and error cases with clear assertions.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:55:57.58851+02:00","updated_at":"2025-10-22T16:14:21.178294+02:00","dependencies":[{"issue_id":"UI-33","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:02.400296+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-32","type":"blocks","created_at":"2025-10-22T11:01:37.246489+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-19","type":"blocks","created_at":"2025-10-22T11:01:42.26224+02:00","created_by":"max"},{"issue_id":"UI-33","depends_on_id":"UI-20","type":"blocks","created_at":"2025-10-22T11:01:50.870233+02:00","created_by":"max"}]}
{"id":"UI-34","title":"Client tests: list, detail and edits","description":"Write unit tests for client views and interactions.\n- List view renders and filters.\n- Detail view loads and renders fields.\n- Edit actions dispatch WS messages and update the UI on reply.\n","acceptance_criteria":"- Tests run in jsdom and assert DOM state before/after actions.\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-22T10:56:03.357772+02:00","updated_at":"2025-10-22T16:14:21.178484+02:00","dependencies":[{"issue_id":"UI-34","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:07.856212+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-32","type":"blocks","created_at":"2025-10-22T11:01:56.196489+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-26","type":"blocks","created_at":"2025-10-22T11:02:01.513858+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-28","type":"blocks","created_at":"2025-10-22T11:02:14.566576+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-29","type":"blocks","created_at":"2025-10-22T11:02:21.280126+02:00","created_by":"max"},{"issue_id":"UI-34","depends_on_id":"UI-30","type":"blocks","created_at":"2025-10-22T11:02:27.799313+02:00","created_by":"max"}]}
{"id":"UI-35","title":"Developer README and run scripts","description":"Add README with setup and usage instructions.\n- How to run the server and app locally.\n- How to run tests, type checks, lint and format.\n- Notes about WS‑only data flow and `.beads/issues.jsonl` watcher.\n","acceptance_criteria":"- README includes copy‑pasteable commands and prerequisites.\n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T10:56:08.236927+02:00","updated_at":"2025-10-22T16:14:21.178666+02:00","closed_at":"2025-10-22T15:47:06.190415+02:00","dependencies":[{"issue_id":"UI-35","depends_on_id":"UI-15","type":"parent-child","created_at":"2025-10-22T10:58:13.16867+02:00","created_by":"max"},{"issue_id":"UI-35","depends_on_id":"UI-17","type":"blocks","created_at":"2025-10-22T11:02:07.446681+02:00","created_by":"max"}]}
{"id":"UI-36","title":"Integrate ws client into UI and handle events","description":"Replace ad-hoc request WebSocket in app/main.js with persistent client from /app/ws.js and handle push events.\n- Use createWsClient() and pass client.send to views\n- Subscribe to 'issues-changed' and refresh list + current detail\n- Keep behavior unchanged in tests (no reliance on a real server)\n- Ensure typecheck/tests/lint pass","acceptance_criteria":"- app/main.js uses createWsClient\n- List refreshes on issues-changed; current detail reloads\n- All validations pass","notes":"Patched app/main.js to use createWsClient; wired issues-changed to reload list and current detail. Validated tests and type checks.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T13:37:55.29277+02:00","updated_at":"2025-10-22T16:14:21.178863+02:00","closed_at":"2025-10-22T13:38:09.899089+02:00"}
{"id":"UI-37","title":"Fix DB monitoring: watch SQLite DB instead of issues.jsonl","description":"The UI’s file watcher currently monitors `issues.jsonl` for changes. This is incorrect when using the SQLite backend; it should watch the resolved SQLite database file instead. As a result, UI updates are missed or stale when the DB changes.\n\nFollow the same DB resolution order as beads CLI:\n1) `--db` flag (e.g., `bd --db /path/to/db.db ...`)\n2) `$BEADS_DB` environment variable\n3) nearest `.beads/*.db` in current directory or ancestors (walk up like git)\n4) `~/.beads/default.db` fallback\n\nNotes:\n- Re-resolve and reattach watchers when working directory or configuration changes.\n- Handle the case where no DB is found with a clear, actionable message.","acceptance_criteria":"- Watches the resolved SQLite DB file instead of `issues.jsonl`.\n- DB path resolution matches beads CLI precedence: `--db` \u003e `$BEADS_DB` \u003e nearest `.beads/*.db` (walk up) \u003e `~/.beads/default.db`.\n- Changing the active workspace or `--db` value rebinds the watcher without restart.\n- When no DB can be resolved, surfaces a user-facing error with hints to set `--db`, `BEADS_DB`, or initialize with `bd init`.\n- Removes any reliance on `issues.jsonl` for change detection in SQLite mode.\n- Includes unit tests for resolution logic and watcher rebind behavior.\n- Updates documentation to describe the new watching source and resolution order.","notes":"Starting implementation: add db resolution per beads precedence (--db \u003e BEADS_DB \u003e nearest .beads/*.db \u003e ~/.beads/default.db), refactor watcher to observe DB file, rebind on config changes, pass --db to bd runner, update tests and docs.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T14:00:30.715131+02:00","updated_at":"2025-10-22T16:14:21.179058+02:00","closed_at":"2025-10-22T14:32:49.664055+02:00"}
{"id":"UI-38","title":"Details view: Markdown rendering and inline editing","description":"Improve the issue details UI for readability and editing.\n\n- Render `description` using a Markdown renderer with safe HTML sanitization.\n- On hover, show a focus ring on editable fields (title, description, acceptance, notes).\n- On click, switch the field into an input/textarea with a Save and Cancel action.\n- Preserve layout and typography for long text and code blocks.\n- Keyboard accessible: focus order, Enter/Escape bindings, and visible focus states.\n- Persist edits to the backend and refresh the view on success; show non-blocking error on failure.","acceptance_criteria":"- Description renders Markdown (headings, lists, code, links) with sanitized output.\n- Hover shows clear focus ring on editable fields; clicking toggles edit mode.\n- Edit mode provides input/textarea + Save and Cancel; Escape cancels, Enter saves where appropriate.\n- Changes persist and the UI reflects updated values without a full reload.\n- Accessibility: tabbable controls, visible focus indicators, ARIA labels where needed.\n- Unit tests cover Markdown rendering and edit mode state transitions.","notes":"Implemented Markdown rendering and inline editing in details view.\n- Added safe renderer: app/utils/markdown.js (headings, lists, code blocks, links, inline code) building DOM nodes without innerHTML; whitelisted URL schemes (http, https, mailto).\n- Updated UI: app/views/detail.js now renders title + description in read mode with hover focus ring. Click/Enter toggles to input/textarea with Save/Cancel. Escape cancels. Ctrl/Cmd+Enter saves description.\n- Added styles: focus ring + markdown typography in app/styles.css.\n- Updated and added tests: app/views/detail.test.js and detail.edits.test.js for markdown rendering and edit-mode transitions.\n- All checks: npm test, npm run typecheck, npm run lint pass.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T14:07:59.198666+02:00","updated_at":"2025-10-22T16:14:21.179261+02:00","closed_at":"2025-10-22T14:17:48.010275+02:00"}
{"id":"UI-39","title":"Fix Blocks / Blocked by in UI","description":"The dependency UI for \"Blocks\" and \"Blocked by\" does not function as expected. Links are not reliably created/removed, and the list does not always refresh to reflect the current state from the DB.","acceptance_criteria":"- Users can add and remove `blocks` dependencies between issues from the details view.\n- The lists for \"Blocks\" and \"Blocked by\" render accurate, up-to-date data after changes.\n- Prevents duplicate links and handles cycles gracefully with a clear error message.\n- Persists correctly to the backend and updates without full page reload.\n- Includes unit tests for add/remove flows and rendering after updates.","notes":"Investigating dependency UI for Blocks/Blocked by: ensure add/remove flows call ws handlers mapping to `bd dep add/remove` and list renders updated data; add dedupe and cycle detection error display; update client cache invalidation on dependency changes; add tests.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-22T14:08:06.845187+02:00","updated_at":"2025-10-22T16:14:21.179468+02:00","closed_at":"2025-10-22T14:43:52.809266+02:00"}
{"id":"UI-4","title":"Filesystem watcher for .beads/issues.jsonl","description":"Watch `.beads/issues.jsonl` for changes and push incremental updates to connected clients over WS.\n\nScope\n- Efficient tailing of JSONL; handle truncation/rotation\n- Debounce and batch updates for list/detail subscribers\n- Diffing strategy to minimize payload sizes\n\nNotes\n- Use file system notifications where available; fallback to polling if necessary.\n- Ensure backpressure handling when many updates occur.","acceptance_criteria":"- Starting the server with at least one connected client results in push updates when `.beads/issues.jsonl` changes.\n- No duplicated events on file truncation and rewrite.\n- Updates are applied in-order and are idempotent on the client side (verified via tests).","notes":"Superseded by the SQLite DB watcher design and implementation. We now watch the active beads DB file (see server/watcher.js) and broadcast `issues-changed` to clients; UI refreshes list/detail accordingly. Tests in server/watcher.test.js validate debounce, filename filtering, and rebind behavior. Documentation is in docs/db-watching.md. Created follow-up UI-46 (discovered-from:UI-4) to clean up remaining JSONL references and consider lightweight change hints in the event payload.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:23.393068+02:00","updated_at":"2025-10-22T16:14:21.180103+02:00","closed_at":"2025-10-22T15:26:56.269411+02:00","dependencies":[{"issue_id":"UI-4","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:10.619299+02:00","created_by":"max"},{"issue_id":"UI-4","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:17:48.077924+02:00","created_by":"max"}]}
{"id":"UI-40","title":"Add support for issue labels in UI","description":"Add label support to issues in the UI. Labels act as lightweight area pointers (e.g., `frontend`, `backend`) and can be attached to issues for organization.","acceptance_criteria":"- Displays labels on issue list items and the details view.\n- Allows adding and removing labels from the details view.\n- Supports creating a new text label on the fly.\n- Persists label changes and updates the view immediately.\n- Not required to include filters by label at this stage.","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-22T14:08:11.96631+02:00","updated_at":"2025-10-22T16:14:21.18033+02:00"}
{"id":"UI-41","title":"Filter: show only Ready issues","description":"Add a list filter to display only issues that are ready to be worked on (no blocking dependencies).","acceptance_criteria":"- Adds a \"Ready\" filter control in the list view.\n- When enabled, the list shows only open issues that are not blocked by any `blocks` dependency.\n- Works together with search and sorting.\n- Filter state is reflected in the URL or stored locally so it persists across reloads.\n- Includes unit tests for readiness computation and filtering behavior.","notes":"Starting implementation: server handler support for filters.ready -\u003e bd ready; client list view adds Ready checkbox; state persistence via localStorage; tests covering handler arguments and UI reloading behavior.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T14:08:21.199623+02:00","updated_at":"2025-10-22T16:14:21.180508+02:00","closed_at":"2025-10-22T15:55:04.485356+02:00"}
{"id":"UI-42","title":"Filter: by issue type","description":"Add filtering by issue type (bug, feature, task, epic, chore) in the list view.","acceptance_criteria":"- Adds UI to filter by one or multiple types: bug, feature, task, epic, chore.\n- Works in combination with \"Ready\" and search filters.\n- Filter state is reflected in the URL or stored locally so it persists across reloads.\n- Includes unit tests for filter state and correct list results.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-22T14:08:30.705446+02:00","updated_at":"2025-10-22T16:14:21.180674+02:00"}
{"id":"UI-43","title":"Add unit tests for markdown util","description":"The new Markdown renderer in `app/utils/markdown.js` has non-trivial parsing logic. Add focused unit tests to validate headings, paragraphs, lists, code blocks, inline code, and safe link handling.","acceptance_criteria":"- Tests cover: empty input, headings (h1/h3), paragraphs with/without blank lines, unordered and ordered lists, fenced code blocks, inline code, allowed links (http/https/mailto), and disallowed links (e.g., javascript:).\n- All tests pass under Vitest in jsdom environment.\n- Lint and typecheck pass.","notes":"Added comprehensive unit tests for the Markdown renderer:\n- File: app/utils/markdown.test.js\n- Covered: empty input, headings (h1/h3), paragraphs with/without blanks, UL/OL lists, fenced code blocks, inline code, allowed links (http/https/mailto), and blocked unsafe schemes (javascript:).\n- Validation: All tests pass; lint and typecheck clean.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T14:21:06.779575+02:00","updated_at":"2025-10-22T16:14:21.180846+02:00","closed_at":"2025-10-22T14:21:56.939962+02:00"}
{"id":"UI-44","title":"Fresh load with issue in URL hash does not auto-select","description":"When the app is loaded directly with an issue ID in the URL hash (deep link), the corresponding issue is not auto-selected after the issues list finishes loading. This breaks deep linking and shareable URLs to specific issues.","design":"Detect a hash with an issue ID on initial load and defer selection until issues have been loaded. Consider reusing the same handler that responds to hash changes after initial render, or buffering the desired selection until the store signals readiness. Ensure id parsing matches the router format, avoid double-select races, and add a small integration test for initial-load deep linking.","acceptance_criteria":"- Given a direct URL that includes a valid issue identifier in the hash, when loading the app for the first time, then after issues are fetched/rendered the matching issue is selected and its details are shown.\n- The selection updates UI state consistently (list highlight + details pane) without requiring user interaction.\n- Works on initial navigation and full hard reload.\n- Does not regress normal navigation: changing selection updates the hash; clearing the hash clears selection.\n- Graceful handling when the hash refers to a non-existent issue: no selection and no console errors.","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-22T14:56:47.037098+02:00","updated_at":"2025-10-22T16:14:21.181015+02:00"}
{"id":"UI-45","title":"Issue type not shown; add colored badge-style UI","description":"The bd issue type is currently not displayed in the UI. It should render as a compact, colored badge so users can quickly distinguish `bug`, `feature`, `task`, `epic`, and `chore` at a glance.","design":"Introduce a reusable `TypeBadge` UI component and mapping of issue types to design tokens (CSS variables). Place the badge next to the issue title in the list and details header. Keep sizes compact (xs/sm) and ensure keyboard and screen reader accessibility. Reuse existing color tokens if available; otherwise, add a small palette with clear documentation.","acceptance_criteria":"- Renders an issue-type badge for every issue in the list and in the details view.\n- Uses distinct, documented colors for: bug, feature, task, epic, chore; maintains WCAG AA contrast on both light and dark themes.\n- Badge includes accessible name (ARIA/tooltip) with the full type label.\n- Layout remains stable; no overflow or wrapping at common breakpoints.\n- Unknown/unsupported types fall back to a neutral style without errors.\n- Unit tests cover rendering for each type and fallback.","notes":"Implementing TypeBadge with accessible label and color tokens; integrating into list and detail views; adding tests for each type and fallback.","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-22T15:03:01.730279+02:00","updated_at":"2025-10-22T16:26:08.981867+02:00","closed_at":"2025-10-22T16:26:08.981867+02:00","dependencies":[{"issue_id":"UI-45","depends_on_id":"UI-44","type":"related","created_at":"2025-10-22T15:03:08.990686+02:00","created_by":"max"}]}
{"id":"UI-46","title":"Align docs and code: move from JSONL to SQLite DB watcher","description":"Replace remaining references to `.beads/issues.jsonl` with the current beads SQLite DB watcher design. Optionally add lightweight change hints in `issues-changed` payload.\n\nScope\n- Audit docs and issue texts for JSONL mentions; update to DB terminology\n- Confirm server watcher docs (docs/db-watching.md) are linked from README/Quickstart\n- (Optional) Investigate adding change `hint: { ids: [...] }` to broadcast payloads\n\nNon-goals\n- Implement full incremental diffing\n\nNotes\n- Current implementation: `server/watcher.js` + tests; broadcasts `issues-changed` with timestamp.\n","status":"closed","priority":3,"issue_type":"chore","created_at":"2025-10-22T15:26:39.291494+02:00","updated_at":"2025-10-22T16:14:21.181354+02:00","closed_at":"2025-10-22T15:46:22.562087+02:00","dependencies":[{"issue_id":"UI-46","depends_on_id":"UI-4","type":"discovered-from","created_at":"2025-10-22T15:26:44.692092+02:00","created_by":"max"}]}
{"id":"UI-47","title":"Detail view: show id, type and title in dependency lists; inline “Add issue” control","description":"In the issue detail view, improve the Dependencies and Dependents sections.\n- Each related issue should render as a compact row showing: the issue id, its type (as a short label/badge), and the issue title. Make the row clickable to navigate.\n- Move the \"Add issue\" control (input + button) to the same header line as the section title to save vertical space and clarify affordance.\n- Keep remove (×) actions for existing links.\n- Respect existing keyboard and screen reader semantics.","acceptance_criteria":"- Dependencies and Dependents each display items in the format: \"\u003cID\u003e \u003cTYPE\u003e \u003cTitle\u003e\" with navigation on click.\n- Type shows as a distinct label/badge; unknown types fall back to neutral text.\n- “Add issue” input and Add button are positioned on the same horizontal line as the section title for both sections.\n- Layout remains stable at common widths; no wrapping for typical short titles; long titles truncate with ellipsis.\n- Unit tests cover rendering of id/type/title and that clicking navigates; tests assert presence of inline add control.\n- No regressions to existing dependency add/remove flows.","notes":"Implementing dependency list rendering (id, type, title), row click navigation, and inline add controls in the header. Adding unit tests to cover rendering and interactions.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T16:13:42.990806+02:00","updated_at":"2025-10-22T16:20:48.396809+02:00","closed_at":"2025-10-22T16:20:48.396809+02:00"}
{"id":"UI-48","title":"Use type-badge for dependency/dependent items","description":"Render the existing type badge component for each related issue item in the Dependencies and Dependents lists of the detail view, replacing the plain text type. Ensure accessibility and layout remain compact.","acceptance_criteria":"- Dependency and Dependent list items include a `.type-badge` next to the ID.\n- Badge uses the related issue's `issue_type` and falls back to neutral on missing/unknown.\n- Existing add/remove interactions and navigation remain unchanged.\n- Unit tests assert presence of badges in both lists.","notes":"Switching dependency and dependent list type rendering to use the shared TypeBadge component; adding a test to assert presence of badges.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T16:30:55.439377+02:00","updated_at":"2025-10-22T16:32:03.41611+02:00","closed_at":"2025-10-22T16:32:03.41611+02:00","dependencies":[{"issue_id":"UI-48","depends_on_id":"UI-45","type":"discovered-from","created_at":"2025-10-22T16:31:02.050383+02:00","created_by":"max"}]}
{"id":"UI-5","title":"Bridge UI edits to bd commands","description":"Implement handlers that translate WS edit messages into `bd` CLI commands and return results.\n\nScope\n- Supported actions: change status; edit title/description/acceptance; create issue\n- Synchronous request/response over WS with typed results\n- Error reporting: include stderr/exit codes in structured form\n\nNotes\n- Commands should be executed in the current workspace root.\n- Consider a queue to serialize writes to avoid conflicts.","acceptance_criteria":"- Editing in the UI results in the expected `bd` command invocation and persisted changes in `.beads/issues.jsonl`.\n- Errors from `bd` surface back to the client in a structured, user-friendly way.\n- Tests simulate failure (e.g., invalid issue id) and verify correct error propagation.","notes":"Implemented WS handlers bridging edits to `bd` commands, including create and acceptance editing.\n\nChanges\n- server/ws.js: add `create-issue` handler; extend `edit-text` to support `acceptance` field; reuse existing validation + error mapping.\n- server/ws.mutations.test.js: added tests for acceptance editing and create-issue ack; all tests pass.\n\nBehavior\n- Status/title/description/acceptance edits call the corresponding `bd update` flags and return the updated issue via `bd show --json`.\n- Create issue runs `bd create ...` and replies with `{ created: true }`; the watcher triggers UI refresh.\n- Errors propagate as structured `bd_error` replies.\n\nNotes\n- Persistence target is the beads SQLite DB (current implementation), not JSONL. Watcher and tests updated in previous tasks.\n- Consider a write queue if we observe conflicts under rapid successive edits.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:32.408003+02:00","updated_at":"2025-10-22T16:14:21.181697+02:00","closed_at":"2025-10-22T15:29:15.570122+02:00","dependencies":[{"issue_id":"UI-5","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:14.803208+02:00","created_by":"max"},{"issue_id":"UI-5","depends_on_id":"UI-3","type":"blocks","created_at":"2025-10-22T09:17:53.10505+02:00","created_by":"max"},{"issue_id":"UI-5","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:18:00.173303+02:00","created_by":"max"}]}
{"id":"UI-6","title":"SPA shell and routing","description":"Implement the SPA shell with client-side routing using ESM and JSDoc types (no heavy framework required).\n\nScope\n- App bootstrapping and environment config\n- Routes: issues list (`/`), issue detail (`/issue/:id`)\n- Minimal UI scaffolding; keyboard navigation baseline\n\nNotes\n- Keep dependencies light; favor small utilities or standard Web APIs.\n- Follow coding standards and unit testing conventions.","acceptance_criteria":"- `npm run dev` serves the SPA shell that can navigate between list and detail routes without reload.\n- Lint, type checks, and basic client tests pass.","notes":"SPA shell and routing implemented.\n- app/main.js boots the shell and wires list/detail panels.\n- app/router.js implements hash routing for list and issue detail; tests in app/router.test.js.\n- app/index.html and styles scaffold the UI; app/main.test.js exercises bootstrap.\n- `npm run dev` serves the SPA via the local server; navigation happens without reload.\n- Lint, typecheck, and tests pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:14:38.544355+02:00","updated_at":"2025-10-22T16:14:21.181876+02:00","closed_at":"2025-10-22T15:29:33.454232+02:00","dependencies":[{"issue_id":"UI-6","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:20.534873+02:00","created_by":"max"},{"issue_id":"UI-6","depends_on_id":"UI-2","type":"blocks","created_at":"2025-10-22T09:18:05.183685+02:00","created_by":"max"}]}
{"id":"UI-7","title":"Issues list view (browse and filter)","description":"Implement the issues list page with basic filtering and search.\n\nScope\n- Show id, title, status, priority, type, assignee\n- Client-side filters (status, type, priority) and text search\n- Subscribe to list updates via WS and update incrementally\n\nNotes\n- Keep render fast; prefer simple virtual list if needed.","acceptance_criteria":"- List loads from server via WS and updates in place on changes.\n- Filters and text search work locally without server roundtrips.\n- Keyboard navigation moves selection; Enter opens detail.","notes":"Issues list view implemented with filtering, search, and keyboard navigation.\n\n- app/views/list.js: renders id/title/status/priority, filters by status and search locally, and supports Arrow Up/Down selection with Enter to open detail. Selection syncs with the shared store.\n- Live updates: list reloads on `issues-changed` events (from app/main.js) with no full page reload.\n- Tests cover rendering, click navigation, and filters.\n\nNote: `type` and `assignee` columns can be added later if exposed by `bd` JSON output; current UI focuses on the essential fields.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-22T09:14:45.710607+02:00","updated_at":"2025-10-22T16:14:21.182074+02:00","closed_at":"2025-10-22T15:35:38.748214+02:00","dependencies":[{"issue_id":"UI-7","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:25.860801+02:00","created_by":"max"},{"issue_id":"UI-7","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:18:11.066066+02:00","created_by":"max"}]}
{"id":"UI-8","title":"Issue detail view (edit text and status)","description":"Implement the issue detail page supporting text editing and status changes.\n\nScope\n- Show and edit: title, description, acceptance\n- Change status via dropdown; reflect allowed states\n- Subscribe to issue updates; optimistic UI with rollback on error\n\nNotes\n- Use debounced input updates with explicit Save/Undo.\n- Respect Coding and Testing Standards.","acceptance_criteria":"- Editing fields triggers WS requests that result in persisted changes via `bd`.\n- Status changes apply and are visible immediately on list and detail pages.\n- Concurrent update from watcher applies non-destructively while editing with clear conflict messaging.","notes":"Issue detail view implemented with inline edits and status changes.\n\nUpdates\n- app/views/detail.js: supports title, description, and acceptance editing with Save/Cancel and keyboard shortcuts (Esc to cancel; Ctrl/Cmd+Enter to save for textareas). Status and priority controls update via WS with optimistic UI and rollback on error. Dependency add/remove controls included.\n- Server already bridges edits; watcher updates refresh list/detail on push.\n- Tests validate core edit flows; acceptance editing added to server and covered in ws tests.\n\nBehavior\n- Edits send `edit-text` and `update-status` messages; replies update UI immediately.\n- Concurrent `issues-changed` events trigger reloads; UI re-renders without losing local state except when a save occurs (baseline approach).\n\nValidation\n- `npm run dev` serves the SPA; navigation between list and detail works without reload.\n- Lint, typecheck, and tests pass.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:15:00.800014+02:00","updated_at":"2025-10-22T16:14:21.182252+02:00","closed_at":"2025-10-22T15:31:09.816053+02:00","dependencies":[{"issue_id":"UI-8","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:30.876933+02:00","created_by":"max"},{"issue_id":"UI-8","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:18:16.047653+02:00","created_by":"max"},{"issue_id":"UI-8","depends_on_id":"UI-5","type":"blocks","created_at":"2025-10-22T09:18:20.241426+02:00","created_by":"max"}]}
{"id":"UI-9","title":"Real-time UI updates from watcher","description":"Wire the client subscription(s) to apply incoming watcher events efficiently to the current page.\n\nScope\n- Normalized client cache keyed by issue id\n- Fast update paths for list and detail routes\n- Visual cues for live updates\n\nNotes\n- Ensure no flicker and preserve scroll/selection.","acceptance_criteria":"- When `.beads/issues.jsonl` changes, the connected UI updates within 200ms for visible issues.\n- No full-page reloads are required; only affected rows/fields update.","notes":"Real-time updates are wired.\n- app/main.js subscribes to `issues-changed` events and reloads the list and active detail view without a full-page reload.\n- Server broadcasts on DB changes via `watchDb`; end-to-end propagation verified by unit tests.\n\nNotes\n- The current implementation re-renders the visible list rather than patching individual rows. Created follow-up UI-46 to consider lightweight change hints and partial DOM updates to minimize work and improve perceived latency.\n","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-22T09:15:06.299306+02:00","updated_at":"2025-10-22T16:14:21.182463+02:00","closed_at":"2025-10-22T15:31:58.149234+02:00","dependencies":[{"issue_id":"UI-9","depends_on_id":"UI-1","type":"parent-child","created_at":"2025-10-22T09:16:36.720644+02:00","created_by":"max"},{"issue_id":"UI-9","depends_on_id":"UI-6","type":"blocks","created_at":"2025-10-22T09:18:27.028524+02:00","created_by":"max"},{"issue_id":"UI-9","depends_on_id":"UI-4","type":"blocks","created_at":"2025-10-22T09:18:32.570119+02:00","created_by":"max"}]}
